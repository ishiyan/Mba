using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using Mbst.Trading;
using Mbst.Trading.Indicators.JohnEhlers;

namespace Tests.Indicators.JohnEhlers
{
    [TestClass]
    public class TrendCycleModeTest
    {
        #region Test data
        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, price, D5…D256, 252 entries.
        /// </summary>
        private readonly List<double> rawInput = new List<double>
        {
             92.0000,  93.1725,  95.3125,  94.8450,  94.4075,  94.1100,  93.5000,  91.7350,  90.9550,  91.6875,
             94.5000,  97.9700,  97.5775,  90.7825,  89.0325,  92.0950,  91.1550,  89.7175,  90.6100,  91.0000,
             88.9225,  87.5150,  86.4375,  83.8900,  83.0025,  82.8125,  82.8450,  86.7350,  86.8600,  87.5475,
             85.7800,  86.1725,  86.4375,  87.2500,  88.9375,  88.2050,  85.8125,  84.5950,  83.6575,  84.4550,
             83.5000,  86.7825,  88.1725,  89.2650,  90.8600,  90.7825,  91.8600,  90.3600,  89.8600,  90.9225,
             89.5000,  87.6725,  86.5000,  84.2825,  82.9075,  84.2500,  85.6875,  86.6100,  88.2825,  89.5325,
             89.5000,  88.0950,  90.6250,  92.2350,  91.6725,  92.5925,  93.0150,  91.1725,  90.9850,  90.3775,
             88.2500,  86.9075,  84.0925,  83.1875,  84.2525,  97.8600,  99.8750, 103.2650, 105.9375, 103.5000,
            103.1100, 103.6100, 104.6400, 106.8150, 104.9525, 105.5000, 107.1400, 109.7350, 109.8450, 110.9850,
            120.0000, 119.8750, 117.9075, 119.4075, 117.9525, 117.2200, 115.6425, 113.1100, 111.7500, 114.5175,
            114.7450, 115.4700, 112.5300, 112.0300, 113.4350, 114.2200, 119.5950, 117.9650, 118.7150, 115.0300,
            114.5300, 115.0000, 116.5300, 120.1850, 120.5000, 120.5950, 124.1850, 125.3750, 122.9700, 123.0000,
            124.4350, 123.4400, 124.0300, 128.1850, 129.6550, 130.8750, 132.3450, 132.0650, 133.8150, 135.6600,
            137.0350, 137.4700, 137.3450, 136.3150, 136.4400, 136.2850, 129.0950, 128.3100, 126.0000, 124.0300,
            123.9350, 125.0300, 127.2500, 125.6200, 125.5300, 123.9050, 120.6550, 119.9650, 120.7800, 124.0000,
            122.7800, 120.7200, 121.7800, 122.4050, 123.2500, 126.1850, 127.5600, 126.5650, 123.0600, 122.7150,
            123.5900, 122.3100, 122.4650, 123.9650, 123.9700, 124.1550, 124.4350, 127.0000, 125.5000, 128.8750,
            130.5350, 132.3150, 134.0650, 136.0350, 133.7800, 132.7500, 133.4700, 130.9700, 127.5950, 128.4400,
            127.9400, 125.8100, 124.6250, 122.7200, 124.0900, 123.2200, 121.4050, 120.9350, 118.2800, 118.3750,
            121.1550, 120.9050, 117.1250, 113.0600, 114.9050, 112.4350, 107.9350, 105.9700, 106.3700, 106.8450,
            106.9700, 110.0300,  91.0000,  93.5600,  93.6200,  95.3100,  94.1850,  94.7800,  97.6250,  97.5900,
             95.2500,  94.7200,  92.2200,  91.5650,  92.2200,  93.8100,  95.5900,  96.1850,  94.6250,  95.1200,
             94.0000,  93.7450,  95.9050, 101.7450, 106.4400, 107.9350, 103.4050, 105.0600, 104.1550, 103.3100,
            103.3450, 104.8400, 110.4050, 114.5000, 117.3150, 118.2500, 117.1850, 109.7500, 109.6550, 108.5300,
            106.2200, 107.7200, 109.8400, 109.0950, 109.0900, 109.1550, 109.3150, 109.0600, 109.9050, 109.6250,
            109.5300, 108.0600
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) tests, test_MAMA.xsl, Period Adjustment, X5…X256, 252 entries, smoothed as AI18=0.33*X18+0.67*AI17.
        /// </summary>
        private readonly List<double> dcPeriod = new List<double>
        {
             0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,  0.00000000000000,
             0.00000000000000,  0.00000000000000,  0.39600000000000,  0.97812000000000,  1.62158040000000,  2.25545086800000,  2.84234568156000,  3.36868456664520,  3.86776291565229,  4.36321983508703,
             4.87235783926831,  5.40838035704577,  5.98190550443027,  6.60199641969884,  7.27686930610184,  8.01438731048222,  8.82241286095647,  9.70906731606755, 10.68293087091460, 11.75320502957710,
            12.92985285048740, 14.22372743856440, 15.55272286275450, 16.77503611571540, 17.85814025111630, 18.72970387649220, 19.30387978646140, 19.63314544969620, 19.86256979430250, 20.09030968609300,
            20.24817834009410, 20.31132870798190, 20.52152604110820, 21.27119054536480, 22.10966835167300, 22.28715460952700, 21.91280773257140, 21.23923470724180, 20.70813161651310, 20.20449150221090,
            19.52863321263000, 18.73709250583170, 17.96311275281150, 17.33367762545960, 16.91743352044750, 16.64300564862120, 16.41952162419500, 16.27464914327850, 16.26425245094380, 16.33321577028600,
            16.39265551523990, 16.39976990202790, 16.38221107536320, 16.37405059271910, 16.35102942468120, 16.26839438425590, 16.12432207371240, 15.99529098667630, 15.96458956780100, 16.07977539207760,
            16.38360881255670, 16.79746341307210, 17.18753188776420, 17.58524022168910, 18.05888760471740, 18.46077773999830, 18.78691120238400, 19.07789869381110, 19.11803073417110, 18.72675385299730,
            18.07403190737810, 17.72999456892580, 18.00699920187680, 18.06680349806270, 17.73551482016550, 17.28467833183610, 16.97456900115070, 16.89386283663200, 17.00556420464730, 17.21986959021550,
            17.48251598471900, 17.79647268844360, 18.15809655229470, 18.56044162987590, 19.03705300462320, 19.61779465906120, 20.13838368155990, 20.58144279802850, 20.93554178712450, 21.09578565733870,
            21.19426268582890, 21.35270550953270, 21.46806615214910, 21.43420235778580, 21.27320458618770, 20.98617884905010, 20.62345107800030, 20.32165030848570, 20.09921951571820, 19.88214300840560,
            19.67081622699810, 19.55217428481160, 19.60485773311710, 19.77836095343260, 19.77886122563300, 19.59009982815140, 19.54609435364200, 19.77945658439880, 20.20526697824140, 20.80572859375930,
            21.45882440191380, 21.50916115262280, 21.07219135457730, 20.33979206665380, 19.60807769029340, 19.15831017112920, 19.03006205140340, 19.23359250887840, 19.84206353515510, 20.83692898803630,
            22.25776348341490, 23.50933063567320, 24.02857349775940, 24.28548086650010, 24.74576845262060, 25.45685387492870, 26.31998583396390, 27.14553013410700, 27.80677101851790, 28.50146147525040,
            29.16835938704370, 29.38723525724370, 29.55886298198770, 30.43981360336700, 30.70779370313880, 30.20667454311960, 29.23518282361370, 28.00037502954910, 26.95505291681000, 26.22399862702800,
            25.67716809996900, 25.19893752937060, 24.76924271120940, 24.40654607774420, 24.12997738279210, 24.02648590415090, 24.17912316847620, 24.26552607123530, 24.07565548132200, 23.81050493977940,
            23.75771490624360, 24.01627030476950, 24.42884190933990, 24.55867905189440, 24.41978729840000, 24.33536819272640, 24.11887925396970, 23.53741527509780, 22.66734716257270, 21.70419061052260,
            20.78848949032480, 19.92593130809770, 19.09528115584620, 18.35405205698280, 17.81539769318840, 17.53491540732180, 17.59552736216070, 18.09376127214910, 18.69300796204700, 19.10361709066390,
            19.40368660687600, 19.79324964337850, 20.14261316711870, 20.30292592814370, 20.37642955508450, 20.42856373321320, 20.36417897031590, 20.26870923265670, 20.31691792510900, 20.52593924664440,
            20.95797078839970, 21.70315565998060, 22.68588957914270, 23.95566588814480, 25.30036991408680, 26.49222048853470, 28.24485763802440, 30.46863151925310, 31.19661794415910, 30.97271495031300,
            30.15801520320610, 29.52193986806340, 28.48090879451130, 27.20913817575940, 25.84740758865390, 24.75875079095690, 24.57820671512040, 25.25622655282780, 26.58938264946150, 28.44936832011270,
            30.75900691394640, 31.63120735338530, 31.95156902113430, 32.19329221743080, 32.18129930292270, 31.78927079951340, 30.94427836437330, 29.74153261553520, 28.44319750131350, 27.27756983469050,
            26.30928991862760, 25.59706087830910, 25.19354035279110, 24.98183319418390, 24.66611779383150, 24.13629363553260, 23.59372342374540, 23.45943359521940, 24.13462330023790, 25.42868068174450,
            27.22154743441240, 28.85990121754770, 29.25658159944000, 28.86760790158470, 28.27077502042400, 27.83957963686970, 27.56292753489200, 27.31665028261770, 27.11537844471070, 27.05619511102920,
            26.72669604084850, 25.93839467294110, 24.88015320695530, 23.98089561843900, 23.51115215671300, 23.02173482203020, 22.29674643126940, 21.42162141795630, 20.54863761751100, 19.78167187971360,
            19.14387361712880, 18.61396641752300
        };

        /// <summary>
        /// Generated using Excel implementation from TA-Lib (http://ta-lib.org/) tests, test_HT.xsl.
        /// </summary>
        private readonly List<double> dcPhase = new List<double>
        {
            double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,
            double.NaN,  double.NaN,  double.NaN,
            639.09090909090900,  98.05299963194700, 132.00564338345400,  69.61331949528320,  72.53929158292410,  49.31988383698000,  70.57064052204580,  95.44397344939550,  15.53098102018940,  -7.59977335936253,
             -0.43908926482948,   0.75159304711349,   6.81682854281200,  10.38041464097730,  14.60138862232650,  23.61952231391600,  34.25173964222910,  45.61939612889610,  54.93203281582900,  62.34730431858280,
             59.09332873285360,  64.74787861710400,  71.38960942346380,  78.26591034671290,  95.01873223899610, 100.81260420916600, 122.15965196914300, 155.92351856084900, 203.60327223472200, 237.36293513970900,
            244.38539212971100, 260.58654095568100, 254.66267427143100, 253.71116813655900, 126.51252837026600, 108.91084071926300, 120.62704116849900, 135.00432720483700, 148.37778407551400, 166.73764548652900,
            192.70016208445300, 227.19271648131900, 250.93069421530800, 272.91238631233800, 306.14557952390500, -30.56440912946640,  -7.29779366562593,  15.79435681229920,  37.27143784018100,  57.28482204365770,
             77.89434659794900, 100.26640790428300, 122.46792347519500, 143.34860922315100, 161.97099218663000, 179.04173949124300, 194.28337763382200, 207.12978658551400, 219.12056620855700, 228.99420937560000,
            246.39888033834300, 259.83330071373300, 279.43099672242300, 300.38982045382800, -42.95237520761510,  10.71059944380160,  67.91671263897760,  95.69661875079390, 116.17343846855600, 131.69663648791300,
            145.22435488266800, 157.96979483912800, 170.90824231177600, 190.12565895164300, 201.99948636973700, 211.84934448916700, 219.50941069822200, 223.55536694633000, 217.70267385839600, 208.61154857738600,
            187.20930268786500, 183.53325881754400, 173.77461459542900, 177.09324308654900, 177.36771678646600, 183.46254384786600, 190.38499136923400, 200.15247884572800, 210.26397611554500, 219.92876325408700,
            230.19440003342700, 241.78128922383700, 255.09398089013500, 269.90233026686000, 287.31443195349700, -22.67219169276530,  21.31042453594620,  55.99561073880190,  76.28592721136950,  93.25596317796150,
            111.58409337397600, 131.21106018529500, 148.25324978238800, 161.34668836868300, 167.25425018604100, 166.56119294454900, 164.79606018404900, 165.59339091940400, 167.71720854219100, 171.16337795073400,
            177.90397416349400, 180.76168462321900, 181.18022018527700, 182.90279528585400, 185.03420448405800, 187.45543006582800, 185.33720976352800, 183.30316508274000, 181.31467258646500, 177.91862390253700,
            179.98928550766400, 182.00429308763000, 183.62347330064100, 185.57299458485300, 189.35191538410900, 194.23220405450000, 200.11245439803000, 206.61598766532100, 214.60761785986900, 223.17826798412900,
            229.59983294953500, 238.43424165042300, 244.29554481830400, 259.55186325451500, 277.88404982202100, 297.46674550039700, -42.41381860502280, -22.05561416691630, -10.76874195668260,   4.55423903808060,
             13.05706378617280,  25.49753552893060,  31.99805128632640,  38.60334291217220,  45.70890152749460,  53.48688015996070,  60.82873486408750,  67.21350248296350,  74.98104788942620,  84.48479832948730,
             97.41668808537870, 101.86825371917200, 131.27099687518600, 148.43969963128300, 169.23915874881900, 186.79876808562800, 222.27683786450500, 226.80174114624100, 148.12023947867300, 119.78684089821000,
            123.91411010078200, 136.35086145099600, 148.39281918279000, 160.94079449625800, 171.89311802023800, 182.21130213571000, 189.94824024493000, 202.58335256387900, 215.72849327557900, 224.87477584909900,
            239.93794152235800, 257.07736337068300, 274.90021437724400, 292.81710751479900, 310.18755119542100, -34.09748283129430, -20.55209191423000, -17.48926436788570,  -6.64084597196063,  -3.41661969757843,
             -1.11706604110969,  -0.61559202318233,  -0.58343503934742,  -0.97020892968976,  -7.33789387098142, -13.71942088996000, -14.16303590443250,  -9.85074940762922,  -2.93111556519989,   0.35846302482548,
             -0.27797938543370,  -4.11254536082527,  -7.19786584394603,  -8.12930435521150,  -7.23274284499956,  -5.60008181003320,  -3.98246383052538,  -1.93459828828531,  -0.91376116945821,   1.11347590999549,
              3.48574296192987,   5.87739974191743,   8.51611669495514,  11.77045158406290,  16.98321519660290,  23.12127015453780,  32.37560208179040,  38.09489298723020,  44.37798569415560,  48.60625731428030,
             57.00174598372450,  65.55585833338270,  77.53688240972470,  96.95830008657520, 111.55989345666400, 124.32277400743800, 131.41492641407500, 137.73657404096000, 141.46543104438800, 142.80498887855200,
            149.73966957805500, 153.53899811794900, 157.79183782289500, 159.94501203849600, 162.96541156987000, 170.96418133015300, 176.71998519472000, 182.65581927371500, 189.05283471879000, 197.04766728263800,
            206.92813680000000, 217.32451174036000, 224.38800791349600, 232.20526011220900, 246.06238925337200, 271.09605242709400, 289.11924018406000,  -31.18231981512890, 23.26913353342980,  47.27652706672060
        };

        /// <summary>
        /// Generated using Excel implementation from TA-Lib (http://ta-lib.org/) tests, test_HT.xsl.
        /// </summary>
        private readonly List<double> sine = new List<double>
        {
            double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,
            double.NaN, double.NaN,  double.NaN,
            -0.9874388886763950, 0.9901389074597280, 0.7430789154373040, 0.9373629963767220, 0.9539229407379340, 0.7583605937417590, 0.9430523282622310, 0.9954894450161860, 0.2677593920226290,-0.1322524693787770,
            -0.0076634783681766, 0.0131173971015221, 0.1186956105503800, 0.1801829214581150, 0.2520928115991770, 0.4006612403521310, 0.5628300247542610, 0.7147094931388430, 0.8184710623910560, 0.8857771050315170,
             0.8580051054352940, 0.9044393510772560, 0.9477105512269880, 0.9791019835938800, 0.9961661502181070, 0.9822460058918840, 0.8465682109433450, 0.4079557291761370,-0.4004013665430420,-0.8421036878603060,
            -0.9017223344864390,-0.9865337683617420,-0.9643853118844240,-0.9598599815079740, 0.8037267766705520, 0.9460240546952540, 0.8605016852751490, 0.7070533756573690, 0.5243161160505560, 0.2294102723810260,
            -0.2198489640488240,-0.7336434870569610,-0.9451240721288890,-0.9987083965673280,-0.8075209150605320,-0.5085066436721070,-0.1270264128351010, 0.2721854747475370, 0.6055917784886910, 0.8413676398899490,
             0.9777625488346960, 0.9839896992562860, 0.8436921159626520, 0.5969447127483850, 0.3094984574050860, 0.0167240212732023,-0.2467178763145330,-0.4560076441356610,-0.6309543271436050,-0.7546432714599400,
            -0.9163549058535820,-0.9842983646399860,-0.9864836587318940,-0.8626035608908470,-0.6813902164376480, 0.1858483908516400, 0.9266383325265240, 0.9950614294774160, 0.8974629492620320, 0.7466772329212920,
             0.5703644678660200, 0.3750953336668390, 0.1580160207328650,-0.1758076016904010,-0.3745982816248290,-0.5276875478007350,-0.6362049492364280,-0.6890552092033720,-0.6115639640491650,-0.4788688150780810,
            -0.1254943141670760,-0.0616279223840421, 0.1084398125157010, 0.0507107190849194, 0.0459258492372133,-0.0603960127005548,-0.1802614924906120,-0.3445196936393600,-0.5039846767879240,-0.6418346779779860,
            -0.7682209569752370,-0.8811490866996920,-0.9663490613441720,-0.9999985470701830,-0.9546858649139780,-0.3854582462377580, 0.3634207386677970, 0.8289947319983170, 0.9714909193370010, 0.9983857647297360,
             0.9298786498974830, 0.7522877436715410, 0.5261656913352240, 0.3198410350076260, 0.2206250837743810, 0.2324067219830480, 0.2622555352188150, 0.2488016117878720, 0.2127369252136960, 0.1536174562004720,
             0.0365743929645966,-0.0132935129731492,-0.0205972714630062,-0.0506416644795282,-0.0877504363551195,-0.1297549156821220,-0.0930172242876989,-0.0576191763867261,-0.0229433518557876, 0.0363188766621527,
             0.0001870031678450,-0.0349743794742610,-0.0631993922084072,-0.0971138050129020,-0.1624979390656570,-0.2458522401310880,-0.3438638176192820,-0.4480085728769030,-0.5679531815591490,-0.6842705623709480,
            -0.7615364178876680,-0.8520399314791350,-0.9010432983130380,-0.9834194615045590,-0.9905476870988080,-0.8872786828920670,-0.6744804687446460,-0.3755063881128740,-0.1868453942460660, 0.0794027920237213,
             0.2259213674108930, 0.4304722733878400, 0.5298904205645140, 0.6239251933219030, 0.7158012315374360, 0.8037206344012380, 0.8731666378756390, 0.9219544489912210, 0.9658401621307640, 0.9953707336137810,
             0.9916336070524670, 0.9786230879164460, 0.7515981300962940, 0.5233956277754490, 0.1867099275394900,-0.1183826185655860,-0.6727134585677300,-0.7289894296051810, 0.5281384062949680, 0.8678795703185170,
             0.8298749053132090, 0.6902403611717530, 0.5240926478571590, 0.3265450140990430, 0.1410201458363470,-0.0385849224232995,-0.1727584531294190,-0.3840270653389320,-0.5839449895165980,-0.7055596595779030,
            -0.8654833335157070,-0.9746729156329320,-0.9963449765889340,-0.9217474051403660,-0.7639362508931000,-0.5606026149454520,-0.3510588357296890,-0.3005270942524180,-0.1156452933894830,-0.0595959289499457,
            -0.0194952452596040,-0.0107439009455394,-0.0101826864310280,-0.0169325310282176,-0.1277205927832380,-0.2371674472604240,-0.2446819018845580,-0.1710822516700410,-0.0511353061733825, 0.0062563192154928,
            -0.0048516364950122,-0.0717158401086350,-0.1252962791394740,-0.1414075684951130,-0.1259001773043880,-0.0975843207989124,-0.0694511521424164,-0.0337586943638060,-0.0159474649423128, 0.0194325975213332,
             0.0608001695138442, 0.1024001693533800, 0.1480876049487220, 0.2039912059729780, 0.2920915426229240, 0.3926785587852390, 0.5354672113127650, 0.6169657298756830, 0.6993887726683350, 0.7501832875129180,
             0.8386871644310250, 0.9103651277237890, 0.9764351312310820, 0.9926345853646890, 0.9300339420371430, 0.8258742381128520, 0.7499387624704700, 0.6725402422076670, 0.6229867037490120, 0.6045297568333980,
             0.5039297182908610, 0.4455885766999630, 0.3779726796046290, 0.3429218283962470, 0.2929489553699220, 0.1570518914741900, 0.0572157944020108,-0.0463361936582273,-0.1573451851308570,-0.2931672021738570,
            -0.4528725984930980,-0.6063286567677410,-0.6995137850617610,-0.7902112777605310,-0.9139878106324440,-0.9998170324167670,-0.9448389776183910,-0.5177630386017770, 0.3950506584043580, 0.7346367050507850
        };

        /// <summary>
        /// Generated using Excel implementation from TA-Lib (http://ta-lib.org/) tests, test_HT.xsl.
        /// </summary>
        private readonly List<double> sineLead = new List<double>
        {
            double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,
            double.NaN, double.NaN,  double.NaN,
            -0.5865008756606930, 0.6010760134973850, 0.0522375953518313, 0.9091393120803100, 0.8866939724449600, 0.9971590529781770, 0.9020538171846020, 0.6368324474361340, 0.8706218323553310, 0.6073789821251400,
             0.7016671195580980, 0.7163213444559970, 0.7860384941578910, 0.8229422149880850, 0.8625259332042720, 0.9311800857903170, 0.9824560606058480, 0.9999415670942400, 0.9850130504072370, 0.9545149566415440,
             0.9699003741647460, 0.9411885260170180, 0.8957923799982550, 0.8361338691916270, 0.6425371253442400, 0.5619014189746250, 0.2222351486408030,-0.3571214380720770,-0.9310766529205810,-0.9768109870729720,
            -0.9433073135761630,-0.8132374819975520,-0.8689541000414960,-0.8770525415166500, 0.1475931480924170, 0.4397692495572380, 0.2482327294712000,-0.0000755239717352,-0.2313707009630830,-0.5260305525740280,
            -0.8452633448517760,-0.9992677882479890,-0.8993236485622310,-0.6702662015228300,-0.1539244027456790, 0.2492915015754510, 0.6115575080093740, 0.8728740226620090, 0.9909162839717420, 0.9771019730335230,
             0.8396734557306670, 0.5697614425887530, 0.2169861504951610,-0.1451956537134670,-0.4535393411417920,-0.6951822190514210,-0.8597041192450010,-0.9517540619903210,-0.9947396502168260,-0.9975710951353530,
            -0.9310629460274820,-0.8208173676831810,-0.5816830016568750,-0.2522412838591280, 0.0357301876330212, 0.8262025299696030, 0.9210718625890570, 0.6334265388777150, 0.3227045140978610, 0.0576226338781002,
            -0.1775030791814070,-0.3902458029200550,-0.5864888795958400,-0.8204080195335590,-0.9205013506909260,-0.9737752029989330,-0.9954119273819820,-0.9996821539441930,-0.9919003713144100,-0.9593708639942700,
            -0.7902545151018210,-0.7493402295361840,-0.6262584572592140,-0.6703391127989300,-0.6738861991115050,-0.7485223840691900,-0.8229875936131110,-0.9074292725287760,-0.9671080150009190,-0.9960855660349680,
            -0.9958932520932240,-0.9574138340514830,-0.8652041011461150,-0.7083111287566420,-0.4646190135134790, 0.3799051621364850, 0.9157357095569460, 0.9816417978833290, 0.8545864068220020, 0.6658040149144910,
             0.3974026651162090, 0.0660812869143209,-0.2292556000437840,-0.4438015597350790,-0.5336772503175370,-0.5234089018965820,-0.4969142899048420,-0.5089421255844810,-0.5404930402692640,-0.5900897578798300,
            -0.6807716781362360,-0.7164442325283580,-0.7215212414254330,-0.7420085481569570,-0.7664280384961050,-0.7928795495979390,-0.7698142295937170,-0.7466749292126270,-0.7231440467849940,-0.6809589449044260,
            -0.7069745376146330,-0.7314048006899320,-0.7503819371382670,-0.7724343179777090,-0.8126119368714450,-0.8592475635206920,-0.9071355135227490,-0.9489640525891650,-0.9835954633562350,-0.9994945745179860,
            -0.9967791122784410,-0.9726372051055730,-0.9438266487324060,-0.8236131488885440,-0.6034299982731380,-0.3012592866284200, 0.0451220549347129, 0.3898374562298360, 0.5625345127655470, 0.7610204246544270,
             0.8485754490678880, 0.9426271321408510, 0.9743624133056830, 0.9937744211043730, 0.9999234595478280, 0.9890496834828740, 0.9620813190845490, 0.9257815160887320, 0.8661907447689560, 0.7717933199927350,
             0.6099143741297350, 0.5465660379422910, 0.0650374448708587,-0.2324218737852860,-0.5626485140051470,-0.7858435966184150,-0.9988707502989160,-0.9995056053709990,-0.2269953459568470, 0.2624108067271960,
             0.1922802999868170,-0.0235747958138623,-0.2316259847404300,-0.4374421611852380,-0.6003241683068820,-0.7338638764656210,-0.8186335536900920,-0.9244352736103260,-0.9869359601928300,-0.9999976116346720,
            -0.9662055929589490,-0.8473318021865150,-0.6441207677355740,-0.3775643212631200,-0.0838943519776584, 0.1891385830833930, 0.4138657569596380, 0.4619148062355390, 0.6205889300081480, 0.6637092720958960,
             0.6931871751689060, 0.6994688836282570, 0.6998698746833480, 0.6950322988997850, 0.6110036127434860, 0.5192294559798360, 0.5125969121038930, 0.5757083087460280, 0.6700235759926480, 0.7115168281729820,
             0.7036678339992160, 0.6545752979714670, 0.6129364849611150, 0.6000111421090120, 0.6124554033545860, 0.6347294098505560, 0.6562899876128100, 0.6828327376881520, 0.6957402985880160, 0.7207141791649000,
             0.7487908163625680, 0.7757975773123150, 0.8040241461526770, 0.8364818144534760, 0.8828100232401670, 0.9279746557928580, 0.9758237828336110, 0.9927466296862280, 0.9999410720652520, 0.9980198650776760,
             0.9781412645524530, 0.9363303228513180, 0.8430454008691210, 0.6162348270656310, 0.3977902134753690, 0.1852760304055380, 0.0625305163973752,-0.0477440698701413,-0.1126037294757250,-0.1358018386690990,
            -0.2544275858052280,-0.3179500551407050,-0.3873842567862560,-0.4217482646499100,-0.4689384577141290,-0.5872793774815170,-0.6654907471409910,-0.7391119157698760,-0.8095586705039820,-0.8833378646001520,
            -0.9506681839279980,-0.9910404297342630,-0.9999429557041830,-0.9921031907559610,-0.9331896469980470,-0.6934514712647360,-0.4364996881408350, 0.2388331163456430, 0.9289332462002390, 0.9992107524543470
        };

        /// <summary>
        /// Generated using Excel implementation from TA-Lib (http://ta-lib.org/) tests, test_HT.xsl.
        /// </summary>
        private readonly List<double> itl = new List<double>
        {
            double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,  double.NaN,
            double.NaN, double.NaN,  double.NaN,
              0.0000000000000,  36.3130000000000,  63.1977500000000,  81.3542500000000,  90.5332083333333,  90.7274166666667,  90.8630416666667,  90.7904791666667,  90.5763791666666,  90.1190625000000,
             89.5976625000000,  88.9683964285714,  88.1875857142857,  87.4745535714286,  86.8648353174603,  86.5406809523809,  86.4262830808081,  86.4413116161616,  86.4596270104895,  86.4576728687979,
             86.5316151556777,  86.5976538663542,  86.6975181489262,  86.7923007288442,  86.7608821809425,  86.6849764619883,  86.4810361842105,  86.2045236842105,  85.9179875000000,  85.7217875000000,
             85.6731214285714,  85.7294946428571,  85.8820685064935,  86.1150389610390,  86.4291412337662,  86.8542435064935,  87.1897624458874,  87.4640642857143,  87.6829172619047,  87.8553064223057,
             87.9218177631579,  87.9011081656347,  87.8265154798762,  87.7802132352941,  87.8975367647059,  87.9932665441176,  88.0649329044118,  88.1058593750000,  88.0771718750000,  87.9885156250000,
             87.8919218750000,  87.8735468750000,  87.9217812500000,  88.0132343750000,  88.1667968750000,  88.3524062500000,  88.5845312500000,  88.8867187500000,  89.2125000000000,  89.3545928308824,
             89.4090386029412,  89.2706643178105,  89.1179705882353,  89.2742091503268,  89.6278143274854,  90.2226447368421,  90.9753333333333,  91.7409342105263,  92.5893245614035,  93.3576615497076,
             94.0969948830409,  94.8495138888889,  95.5591111111111,  96.4495179738562,  97.4016168300654,  98.4999640522876,  99.7313676470588, 101.1202794117650, 102.8572647058820, 104.2939607843140,
            105.8849452614380, 107.0814910990710, 108.1507799707600, 108.9417928362570, 109.6523348684210, 110.1277241228070, 110.5267148809520, 110.9164619047620, 111.3471666666670, 111.8653571428570,
            112.3597857142860, 112.7992380952380, 113.1747142857140, 113.5586666666670, 114.0577738095240, 114.6932047619050, 115.2846898809520, 115.7229029761900, 115.8414500000000, 115.7467000000000,
            115.6115500000000, 115.5303375000000, 115.5548000000000, 115.6614000000000, 115.9122375000000, 116.3321625000000, 116.8428375000000, 117.2830500000000, 117.7253922619050, 118.0727228896100,
            118.4984101731600, 119.2198956709960, 120.0234311688310, 120.9289954887220, 121.7905789473680, 122.5689105263160, 123.2356894736840, 123.8346386591480, 124.4085501367050, 124.8498862554110,
            125.4094954004330, 126.1065170454550, 126.7064925000000, 127.4240825000000, 127.8647176923080, 128.0896789173790, 128.1540621001220, 128.0788455784320, 128.1446725050170, 128.3183694581280,
            128.4362103448280, 128.5848821839080, 128.6186973303670, 128.7719790322580, 128.8848929180570, 128.9942553260240, 129.0945314906040, 129.1530999536860, 129.0838581603580, 128.8024011680910,
            128.4259584615380, 127.8496453846150, 127.2448900000000, 126.6843541666670, 126.1858333333330, 125.7495416666670, 125.2761041666670, 124.7606666666670, 124.3471666666670, 124.0095208333330,
            123.7731875000000, 123.6621125000000, 123.6056416666670, 123.5744416666670, 123.5148250000000, 123.4937083333330, 123.4761041666670, 123.6832443181820, 124.0308714826840, 124.5405766233770,
            125.2020811061750, 125.8966645363410, 126.4680156432750, 126.9272675438600, 127.4003611111110, 127.8605833333330, 128.1324342105260, 128.3722748538010, 128.6053611111110, 128.6804526315790,
            128.7627552631580, 128.7694289473680, 128.7595250000000, 128.7409750000000, 128.6613250000000, 128.4858250000000, 128.2154750000000, 127.8500845238100, 127.4645440476190, 127.1153875541130,
            126.7443323451910, 126.3035666290230, 125.8504999604740, 125.3674468450390, 124.8902561172160, 124.3766410622710, 123.8351980503370, 123.2633556835640, 122.5153494623660, 121.7438575268820,
            120.2481227342550, 118.4358502645500, 116.5046713064710, 114.5443467073670, 112.9054354415950, 111.4893484615380, 110.7192281481480, 110.1931396825400, 110.2034782445810, 110.1120396292030,
            109.5987628888250, 108.8005075604840, 107.8019843750000, 106.8111562500000, 105.6388140120970, 104.3560227486560, 102.7347166042630, 101.0735459592080,  99.5273900488400,  98.3256981583231,
             97.3580796011396,  96.7594046153846,  96.4602600000000,  96.1232166666667,  96.1488191666667,  96.4425624637681,  96.7984085144927,  97.1613937318841,  97.3868053381643,  97.5343687643678,
             97.8406773180077,  98.3334693486590,  99.0595665024631,  99.8837727832512, 100.6778885467980, 101.4226269841270, 102.0713564814810, 102.6847440476190, 103.2616851851850, 103.9931695156700,
            104.8224465811970, 105.7652606837610, 106.6112275641030, 107.5680471014490, 108.3253364624510, 108.8823498494260, 109.2757501411630, 109.6873409090910, 110.1830037593980, 110.4551917293230
        };

        /// <summary>
        /// Taken from TA-Lib (http://ta-lib.org/) implementation, test_HT.xsl.
        /// The first 63 values are skipped (unstable period according to TA-Lib), total 200 values available (trial version).
        /// </summary>
        private readonly List<double> tcm = new List<double>
        {
            // First 63 entries are not available (unstable period).
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN, double.NaN,
            double.NaN, double.NaN, double.NaN,
            1, 1, 1, 1, 1, 1, 1,-1,-1, 1, 1, 1,-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,-1,-1, 1, 1, 1,-1,-1,-1,-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1,-1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,-1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
        };
        #endregion

        #region NameTest
        /// <summary>
        /// A test for Name.
        /// </summary>
        [TestMethod]
        public void NameTest()
        {
            var target = new TrendCycleMode();
            Assert.AreEqual("TCM", target.Name);
        }
        #endregion

        #region MonikerTest
        /// <summary>
        /// A test for Moniker.
        /// </summary>
        [TestMethod]
        public void MonikerTest()
        {
            var target = new TrendCycleMode();
            Assert.AreEqual("TCM4", target.Moniker);
            //target = new TrendCycleMode(4);
            //Assert.AreEqual("TCM4", target.Moniker);
            target = new TrendCycleMode(/*3*/);
            Assert.AreEqual("TCM3", target.Moniker);
            target = new TrendCycleMode(/*2*/);
            Assert.AreEqual("TCM2", target.Moniker);
        }
        #endregion

        #region DescriptionTest
        /// <summary>
        /// A test for Description.
        /// </summary>
        [TestMethod]
        public void DescriptionTest()
        {
            var target = new TrendCycleMode();
            Assert.AreEqual("Trend versus Cycle Mode", target.Description);
        }
        #endregion

        #region SmoothingLengthTest
        /// <summary>
        /// A test for SmoothingLength.
        /// </summary>
        [TestMethod]
        public void SmoothingLengthTest()
        {
            var target = new TrendCycleMode();
            Assert.AreEqual(4, target.SmoothingLength);
            //target = new TrendCycleMode(4);
            //Assert.AreEqual(4, target.SmoothingLength);
            target = new TrendCycleMode(/*3*/);
            Assert.AreEqual(3, target.SmoothingLength);
            target = new TrendCycleMode(/*2*/);
            Assert.AreEqual(2, target.SmoothingLength);
        }
        #endregion

        #region IsPrimedTest
        /// <summary>
        /// A test for IsPrimed.
        /// </summary>
        [TestMethod]
        public void IsPrimedTest()
        {
            var target = new TrendCycleMode();
            Assert.IsFalse(target.IsPrimed);
            for (int i = 1; i <= 23; ++i)
            {
                var scalar = new Scalar(DateTime.Now, i);
                scalar = target.Update(scalar);
                Assert.IsTrue(double.IsNaN(scalar.Value));
                Assert.IsFalse(target.IsPrimed);
            }
            for (int i = 24; i <= 48; ++i)
            {
                var scalar = new Scalar(DateTime.Now, i);
                scalar = target.Update(scalar);
                Assert.IsFalse(double.IsNaN(scalar.Value));
                Assert.IsTrue(target.IsPrimed);
            }
        }
        #endregion

        #region DominantCyclePeriodTest
        /// <summary>
        /// A test for DominantCyclePeriod.
        /// </summary>
        [TestMethod]
        public void DominantCyclePeriodTest()
        {
            const int digits = 9;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.DominantCyclePeriod, digits);
                double u = Math.Round(dcPeriod[i], digits);
                if (!double.IsNaN(d))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region DominantCyclePhaseTest
        /// <summary>
        /// A test for DominantCyclePhase.
        /// </summary>
        [TestMethod]
        public void DominantCyclePhaseTest()
        {
            const int digits = 8;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.DominantCyclePhase, digits);
                double u = Math.Round(dcPhase[i], digits);
                if (!double.IsNaN(d))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region SineWaveTest
        /// <summary>
        /// A test for SineWave.
        /// </summary>
        [TestMethod]
        public void SineWaveTest()
        {
            const int digits = 9;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.SineWave, digits);
                double u = Math.Round(sine[i], digits);
                if (!double.IsNaN(d))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region SineWaveLeadTest
        /// <summary>
        /// A test for SineWaveLead.
        /// </summary>
        [TestMethod]
        public void SineWaveLeadTest()
        {
            const int digits = 9;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.SineWaveLead, digits);
                double u = Math.Round(sineLead[i], digits);
                if (!double.IsNaN(d))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region InstantaneousTrendLineTest
        /// <summary>
        /// A test for InstantaneousTrendLine.
        /// </summary>
        [TestMethod]
        public void InstantaneousTrendLineTest()
        {
            const int digits = 9;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < rawInput.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.InstantaneousTrendLine, digits);
                double u = Math.Round(itl[i], digits);
                if (!double.IsNaN(d))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region UpdateTest
        /// <summary>
        /// A test for Update.
        /// </summary>
        [TestMethod]
        public void UpdateTest()
        {
            const int digits = 9;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < tcm.Count; ++i)
            {
                target.Update(rawInput[i]);
                double d = Math.Round(target.Value, digits);
                double u = Math.Round(tcm[i], digits);
                if (i != 70 && i != 71 && !double.IsNaN(u))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region ResetTest
        /// <summary>
        /// A test for Reset.
        /// </summary>
        [TestMethod]
        public void ResetTest()
        {
            double d, u; const int digits = 9;
            var target = new TrendCycleMode();
            // Tradestation implementation skips first 9 bars.
            for (int i = 9; i < tcm.Count; i++)
            {
                target.Update(rawInput[i]);
                d = Math.Round(target.Value, digits);
                u = Math.Round(tcm[i], digits);
                if (i != 70 && i != 71 && !double.IsNaN(u))
                    Assert.AreEqual(u, d);
            }
            target.Reset();
            for (int i = 9; i < tcm.Count; i++)
            {
                target.Update(rawInput[i]);
                d = Math.Round(target.Value, digits);
                u = Math.Round(tcm[i], digits);
                if (i != 70 && i != 71 && !double.IsNaN(u))
                    Assert.AreEqual(u, d);
            }
        }
        #endregion

        #region ConstructorTest
        /// <summary>
        /// A test for Constructor.
        /// </summary>
        [TestMethod]
        public void TrendCycleModeConstructorTest()
        {
            var target = new TrendCycleMode();
            Assert.AreEqual(4, target.SmoothingLength);
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.MedianPrice);

            target = new TrendCycleMode(ohlcvComponent:OhlcvComponent.TypicalPrice);
            Assert.AreEqual(4, target.SmoothingLength);
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.TypicalPrice);

            target = new TrendCycleMode(/*3*/);
            Assert.AreEqual(3, target.SmoothingLength);
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.MedianPrice);

            target = new TrendCycleMode(/*3, 1, OhlcvComponent.OpeningPrice*/);
            Assert.AreEqual(3, target.SmoothingLength);
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.OpeningPrice);

            target = new TrendCycleMode(/*2*/);
            Assert.AreEqual(2, target.SmoothingLength);
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.MedianPrice);

            target = new TrendCycleMode(/*2, 1, OhlcvComponent.OpeningPrice*/);
            Assert.AreEqual(2, target.SmoothingLength);
            Assert.IsFalse(target.IsPrimed);
            Assert.IsTrue(target.OhlcvComponent == OhlcvComponent.OpeningPrice);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TrendCycleModeConstructorTest2()
        {
            var target = new TrendCycleMode(/*5*/);
            Assert.IsFalse(target.IsPrimed);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TrendCycleModeConstructorTest3()
        {
            var target = new TrendCycleMode(/*1*/);
            Assert.IsFalse(target.IsPrimed);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TrendCycleModeConstructorTest4()
        {
            var target = new TrendCycleMode(/*0*/);
            Assert.IsFalse(target.IsPrimed);
        }

        /// <summary>
        /// A test for constructor exception.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void TrendCycleModeConstructorTest5()
        {
            var target = new TrendCycleMode(/*-8*/);
            Assert.IsFalse(target.IsPrimed);
        }
        #endregion

        #region SerializationTest
        private static void SerializeTo(TrendCycleMode instance, string fileName)
        {
            var dcs = new DataContractSerializer(typeof(TrendCycleMode), null, 65536, false, true, null);
            using (var fs = new FileStream(fileName, FileMode.Create))
            {
                dcs.WriteObject(fs, instance);
                fs.Close();
            }
        }

        private static TrendCycleMode DeserializeFrom(string fileName)
        {
            var fs = new FileStream(fileName, FileMode.Open);
            XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(fs, new XmlDictionaryReaderQuotas());
            var ser = new DataContractSerializer(typeof(TrendCycleMode), null, 65536, false, true, null);
            var instance = (TrendCycleMode)ser.ReadObject(reader, true);
            reader.Close();
            fs.Close();
            return instance;
        }

        /// <summary>
        /// A test for the serialization.
        /// </summary>
        [TestMethod]
        public void SerializationTest()
        {
            double d, u; const int digits = 9;
            var source = new TrendCycleMode();
            // Tradestation-implementation skips first 9 bars.
            for (int i = 9; i < 111; ++i)
            {
                source.Update(rawInput[i]);
                d = Math.Round(source.Value, digits);
                u = Math.Round(tcm[i], digits);
                if (i != 70 && i != 71 && !double.IsNaN(u))
                    Assert.AreEqual(u, d);
            }
            const string fileName = "TrendCycleMode_1.xml";
            SerializeTo(source, fileName);
            TrendCycleMode target = DeserializeFrom(fileName);
            Assert.AreEqual(source.Value, target.Value);
            Assert.AreEqual(source.DominantCyclePeriod, target.DominantCyclePeriod);
            // Tradestation-implementation skips first 9 bars.
            for (int i = 111; i < tcm.Count; ++i)
            {
                target.Update(rawInput[i]);
                d = Math.Round(target.Value, digits);
                u = Math.Round(tcm[i], digits);
                if (!double.IsNaN(u))
                    Assert.AreEqual(u, d);
            }
            //FileInfo fi = new FileInfo(fileName);
            //fi.Delete();
        }
        #endregion
    }
}
